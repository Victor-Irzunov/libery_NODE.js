Node.js
________________________________________________________________________________________________________________

.question()        Метод показывает первый параметр (вопрос) и ожидает ввода пользователя. 
                  Он вызывает функцию обратного вызова после нажатия клавиши ввода.
--------------------------

.readline          Модуль обеспечивает интерфейс для считывания данных из Readable 
                  потока (например process.stdin) на одну строку за один раз
-------------------------

.readlineSync      пытается разрешить вашему скрипту общаться с пользователем через консоль, 
                  даже если поток ввода / вывода перенаправлен
------------------------

module.exports    показывает объект, на который указывает

------

exports             раскрывает свойства объекта, на который он указывает  

-----------------------

process.nextTick()  устанавливает приоритет вызова и выполняет его 
                    непосредственно перед началом следующего тика
-----------------------

setImmediate()      Если вы хотите выполнить какой-то фрагмент кода асинхронно, 
                    но как можно скорее, одним из вариантов является использование    setImmediate(() => {..})
----------------------

XMLHttpRequest (XHR)  даёт возможность из JavaScript делать HTTP-запросы к серверу без перезагрузки страницы
---------------------

res.render()         используется для возврата визуализированного html файла.
---------------------

req.body             содержит параметры, которые отправляются клиентом как часть запроса POST

                    (req.body.user.emai // => "tobi@learnboost.com")
----------------------------

cors                если клиент на другом домене мы можем овечать нашим сервером
--------------------------

morgan              красиво логировать определенный запрос, то есть смотреть что происходит с сервером в данный 
                    момент и теперь как это все работает
-------------------------

.setHeader          устанавливаем заголовок
-------------------------

response            используется для заполнения данных, которые мы собираемся вернуть клиенту
------------------------

res.end                закрываем ответ
------------------------

readFile              читать файл
--------------------------

path.resolve()       возвращает абсолютный путь к файлу  (не будет ../) особеность если не найдет выкин ошибку
------------------------

path.join()          глупее, просто выведет что мы ему передадим ('./a', 'b', 'c/d', 'f', '..') // a/b/c/d
-----------------------

path.posix.join('/a', 'b', 'c') // /a/b/c
----------------------

path.win32.join('/a', 'b', 'c')  // \a\b\c
---------------------

fs.watchFile('./..', (file)=>{})  что понимать когда в файле произошли изменения
--------------------

throw err            в error запишится ошибка
--------------------

const util = require('util') - сравнить два обьекта (на равество)  util.isDeepStrictEqual({a:{b:'c'}}, {a:{b:'c'}})
-------------------

appendFile            -добавить 
------------------

.area               --  
------------------

.createReadStream()   читать по частям
--------------------

.pipe()              "пускать по трубам" между двумя стримами (пример: Readable(от куда льются), Writable(куда можно залить)) переливать данные 
--------------------

zlib                 const zlib = require('zlib')
                     const gzip = zlib.createGzip()  //gzip создаем Transform stream    //кореной модуль //
-------------------

.readFileSync()    'останавливает' пока файл не вычетается дальше код не пойдет
------------------

.stringify()       вернуть строку 
------------------
       
Date.now()        метод возвращает количество миллисекунд, прошедших с 1 января 1970 года 00:00:00 по UTC.
-----------------

.emit()          Синхронно вызывает каждого из прослушивателей, зарегистрированных для указанного события eventName, в порядке их регистрации, передавая каждому предоставленные аргументы.

                 Возвращает, true если у события есть слушатели, в false противном случае.
-----------------
             
.from()         --
----------------

.sendFile       Функция res.sendFile () в основном Передает файл по указанному адресу path и устанавливает поле HTTP-заголовка ответа Content-Type на основе расширения имени файла
                 Syntax: res.sendFile(path [, options] [, fn])
---------------

root          Корневой каталог для относительных имен файлов
--------------
  
headers	      Объект, содержащий заголовки HTTP для обслуживания файла.
-------------

.create()     --
--------------

.use()          позволяет добовлятьдоп функциональность
-----------------

.urlencoded       это встроенный в Express метод распознавания входящего объекта запроса в виде строк или массивов . Этот метод вызывается в вашем приложении как промежуточное ПО с использованием кода:app.use(express.urlencoded());.
                  вы отправляете данные на сервер, и вы просите сервер принять ИЛИ сохранить эти данные (объект), которые заключены в тело (т.е. req.body) этого (POST или PUT) запроса
----------------

express.json()  то встроенный в express метод распознавания входящего объекта запроса как объекта JSON
---------------

.deleteOne      Удаляет отдельный документ из коллекции   Если вы не предоставляете документ запроса (или если вы предоставляете пустой документ), MongoDB сопоставляет все документы в коллекции и удаляет первое совпадение.
---------------

.populate()     позволяет вам ссылаться на документы из других коллекций MongoDB
---------------

.select()       какие имено поля достать из БД
--------------

.addToCart     --
--------------

.execPopulate() --
----------------

.toObject()   преобразует документ мангуста в простой объект JavaScript.Вместо того, чтобы применять эти параметры для отдельных документов, мы можем объявить параметры на уровне схемы и применить их ко всем документам схемы по умолчанию.
              Чтобы все виртуальные файлы отображались в вашем console.logвыводе, установите для toObjectпараметра значение { getters: true }:
---------------















































